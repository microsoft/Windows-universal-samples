<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="SDKTemplate.Scenario1_Advertiser"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:SDKTemplate"
    xmlns:wifidirect="using:Windows.Devices.WiFiDirect"
    mc:Ignorable="d">

    <ScrollViewer Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" Padding="12,10,12,12"
                  VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
        <StackPanel>
            <TextBlock Text="Description:" Style="{StaticResource SampleHeaderTextStyle}"/>
            <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap">
                        This scenario illustrates how to make the system discoverable, and how to listen for and accept an incoming connection request.
            </TextBlock>

            <VariableSizedWrapGrid Orientation="Horizontal">
                <!-- Advertisement parameters -->
                <StackPanel HorizontalAlignment="Left" Width="335" Margin="0,10,10,0" Padding="5">
                    <TextBlock Style="{StaticResource SubtitleTextBlockStyle}" Text="Advertisement"/>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock Text="Listen State:" Margin="0,5,10,0"/>
                        <ComboBox x:Name="cmbListenState">
                            <ComboBoxItem Content="Normal" IsSelected="True">
                                <ComboBoxItem.Tag>
                                    <wifidirect:WiFiDirectAdvertisementListenStateDiscoverability>
                                        Normal
                                    </wifidirect:WiFiDirectAdvertisementListenStateDiscoverability>
                                </ComboBoxItem.Tag>
                            </ComboBoxItem>
                            <ComboBoxItem Content="Intensive">
                                <ComboBoxItem.Tag>
                                    <wifidirect:WiFiDirectAdvertisementListenStateDiscoverability>
                                        Intensive
                                    </wifidirect:WiFiDirectAdvertisementListenStateDiscoverability>
                                </ComboBoxItem.Tag>
                            </ComboBoxItem>
                            <ComboBoxItem Content="None">
                                <ComboBoxItem.Tag>
                                    <wifidirect:WiFiDirectAdvertisementListenStateDiscoverability>
                                        None
                                    </wifidirect:WiFiDirectAdvertisementListenStateDiscoverability>
                                </ComboBoxItem.Tag>
                            </ComboBoxItem>
                        </ComboBox>
                    </StackPanel>

                    <CheckBox x:Name="chkListener" Content="Enable Listener" IsChecked="True"/>
                    <CheckBox x:Name="chkPreferGroupOwnerMode" Content="Group Owner"/>

                    <!-- Legacy mode group owner settings require that IsAutonomousGroupOwnerEnabled be true -->
                    <StackPanel Margin="20,0,0,0" Visibility="{x:Bind chkPreferGroupOwnerMode.IsChecked.Value, Mode=OneWay}">
                        <CheckBox x:Name="chkLegacySetting" Content="Enable legacy mode GO"/>
                        <!-- Legacy mode properties require that legacy mode be enabled -->
                        <Grid Visibility="{x:Bind chkLegacySetting.IsChecked.Value, Mode=OneWay}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="Passphrase:" Grid.Column="0" Grid.Row="0" Margin="5,5,0,0"/>
                            <TextBox x:Name="txtPassphrase" Margin="10,5,0,0" ToolTipService.ToolTip="Passphrase for legacy mode GO" Grid.Row ="0" Grid.Column="1"/>
                            <TextBlock Text="SSID:" Grid.Column="0" Grid.Row="1" Margin="5,5,0,0"/>
                            <TextBox x:Name="txtSsid" Margin="10,5,0,0" ToolTipService.ToolTip="SSID for legacy mode GO" Grid.Row ="1" Grid.Column="1"/>
                        </Grid>
                    </StackPanel>
                    <TextBlock HorizontalAlignment="Left" Text="Informational Element:" Margin="0,10,0,0"/>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBox x:Name="txtInformationElement" Width="250"/>
                        <Button x:Name="btnAddIe"
                                IsEnabled="{x:Bind local:Utils.IsNonEmptyString(txtInformationElement.Text), Mode=OneWay}"
                                Content="Add" Click="btnAddIe_Click" Margin="10,0,0,0"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <Button x:Name="btnStartAdvertisement" Content="Start Advertisement" Click="btnStartAdvertisement_Click"/>
                        <Button x:Name="btnStopAdvertisement" Content="Stop Advertisement" IsEnabled="False" Click="btnStopAdvertisement_Click" Margin="10,0,0,0"/>
                    </StackPanel>
                </StackPanel>

                <!-- Connection parameters -->
                <local:ConnectionSettingsPanel x:Name="connectionSettingsPanel" Width="335" Margin="0,10,0,0"/>
            </VariableSizedWrapGrid>

            <StackPanel Margin="0,10,0,0">
                <TextBlock Text="Connected devices:"/>
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                    <ListView x:Name="lvConnectedDevices" HorizontalAlignment="Left" Height="134" Width="314"
                              ItemsSource="{x:Bind ConnectedDevices}" DisplayMemberPath="DisplayName"
                              SelectionMode="Single" Background="DimGray"/>
                </ScrollViewer>
                <Button Name="btnCloseDevice" Content="Close Device"
                        Click="btnCloseDevice_Click" Margin="0,10,0,0"/>

                <StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBox x:Name="txtSendMessage" Width="200" PlaceholderText="Enter a message"/>
                        <Button x:Name="btnSendMessage" Content="Send"
                                IsEnabled="{x:Bind local:Utils.CanSendMessage(txtSendMessage.Text\, lvConnectedDevices.SelectedItem), FallbackValue=False, Mode=OneWay}"
                                Margin="10,0,0,0" Click="btnSendMessage_Click"/>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
        </StackPanel>
    </ScrollViewer>
</Page>
