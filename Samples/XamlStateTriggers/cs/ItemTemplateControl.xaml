<UserControl
    x:Class="StateTriggersSample.ItemTemplateControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:StateTriggersSample"
    xmlns:triggers="using:StateTriggersSample.CustomTriggers"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    d:DesignHeight="300"
    d:DesignWidth="400">

    <StackPanel x:Name="mainPanel" Background="LightGray" Orientation="Vertical" >      
        <TextBlock x:Name="NameTB" Text="{Binding Path=Name}" FontSize="12" Margin="5" Foreground="Black" TextWrapping="Wrap" />
        <TextBlock x:Name="DescriptionTB" FontSize="15" Text="{Binding Path=Description}" Foreground="Black" Margin="5" TextWrapping="Wrap"  />
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="ControlSizeStates">
                <!-- Fourth set of VisualStates for building responsive UI optimized based on Control size.
                     Take a look at ControlSizeTrigger.cs class in CustomTriggers folder to see how this is implemented -->
                <VisualState>                   
                    <VisualState.StateTriggers>
                        <!-- This trigger is activated if the mainPanel's height is >=150 effective pixels -->
                        <triggers:ControlSizeTrigger MinControlHeight="150" TargetElement="{x:Bind Path=mainPanel}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="mainPanel.Background" Value="Black" />
                        <Setter Target="NameTB.Foreground" Value="White" />
                        <Setter Target="DescriptionTB.Foreground" Value="White" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="ColorStates">
                <!-- Fifth set of VisualStates for building responsive UI optimized based on a ViewModel property.
                     Simply use the StateTrigger class inline and bind to a boolean property in the ViewModel to achieve this. No need to create a custom trigger -->
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding Path=IsColorEnabled}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="NameTB.Foreground" Value="White" />
                        <Setter Target="DescriptionTB.Foreground" Value="Indigo" />
                        <Setter Target="mainPanel.Background" Value="Coral" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </StackPanel>
</UserControl>
