<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page x:Class="ApplicationDataSample.Settings" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:ApplicationDataSample" xmlns:common="using:SDKTemplate.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
  <Grid x:Name="LayoutRoot" HorizontalAlignment="Left" VerticalAlignment="Top">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="Input" Grid.Row="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <TextBlock TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
         The primary way to store settings for an app is to save them as
        key-value pairs in either 
        <Bold>Windows.Storage.ApplicationData.current.localSettings</Bold>
         or 
        <Bold>Windows.Storage.ApplicationData.current.roamingSettings</Bold>
        . Use 
        <Bold>localSettings</Bold>
         for settings that are specific to a device, or use 
        <Bold>roamingSettings</Bold>
         to transition settings between a user's PCs. For roaming, also refer to
        the HighPriority and the DataChanged Event scenarios. 
        <LineBreak/>
        <LineBreak/>
         This scenario writes, reads, and clears a setting in 
        <Bold>roamingSettings</Bold>
        . 
      </TextBlock>
      <StackPanel Orientation="Horizontal" Margin="0,10,0,0" Grid.Row="1">
        <Button x:Name="WriteSetting" Content="Write setting" Margin="0,0,10,0" Click="WriteSetting_Click"/>
        <Button x:Name="DeleteSetting" Content="Delete setting" Margin="0,0,10,0" Click="DeleteSetting_Click"/>
      </StackPanel>
    </Grid>
    <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
      <TextBlock x:Name="OutputTextBlock" Text="No Output available." Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left"/>
    </Grid>
    <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
    <VisualStateManager.VisualStateGroups>
      <VisualStateGroup>
        <VisualState x:Name="DefaultLayout"/>
        <VisualState x:Name="Below768Layout"/>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Grid>
</Page>