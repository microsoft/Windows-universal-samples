<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page x:Class="ApplicationDataSample.HighPriority" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:ApplicationDataSample" xmlns:common="using:SDKTemplate.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
  <Grid x:Name="LayoutRoot" HorizontalAlignment="Left" VerticalAlignment="Top">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="Input" Grid.Row="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <TextBlock TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
         The HighPriority setting is designed to transition time-critical data
        more rapidly between devices. This is for information like user context
        (e.g. game level or page in a book). To use this setting, name one
        setting 'HighPriority' and the system will automatically take care of
        roaming frequency. The HighPriority setting can be a composite setting. 
        <LineBreak/>
        <LineBreak/>
         This scenario demonstrates writing to the HighPriority setting, and
        responding to the datachanged notification of incoming roaming data. Run
        the scenario on two machines using the same connected account to observe
        the roaming. 
      </TextBlock>
      <StackPanel Orientation="Horizontal" Margin="0,10,0,0" Grid.Row="1">
        <Button x:Name="IncrementHighPriority" Content="Increment" Margin="0,0,10,0" Click="IncrementHighPriority_Click"/>
      </StackPanel>
    </Grid>
    <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
      <TextBlock x:Name="OutputTextBlock" Text="" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left"/>
    </Grid>
    <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
    <VisualStateManager.VisualStateGroups>
      <VisualStateGroup>
        <VisualState x:Name="DefaultLayout"/>
        <VisualState x:Name="Below768Layout"/>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Grid>
</Page>