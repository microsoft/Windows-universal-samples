<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page x:Class="ApplicationDataSample.DataChangedEvent" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:ApplicationDataSample" xmlns:common="using:SDKTemplate.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
  <Grid x:Name="LayoutRoot" HorizontalAlignment="Left" VerticalAlignment="Top">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="Input" Grid.Row="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <TextBlock TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
         For roaming of settings or files, the app needs to know when data has
        changed to update its UI accordingly. The datachanged event will be
        invoked anytime a sync from the roaming handler occurs. 
        <LineBreak/>
        <LineBreak/>
         This scenario will respond to the datachanged event and update the UI.
        Run this scenario on two machines logged in with the same Microsoft
        Account to see the UI change as the updated setting is roamed down. 
      </TextBlock>
      <StackPanel Orientation="Vertical" Margin="0,10,0,0" Grid.Row="1">
        <TextBlock TextWrapping="Wrap" Text="Name: " Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <TextBox x:Name="UserName" IsReadOnly="false" Width="300" Margin="0,10,0,0" TextWrapping="Wrap" Text="" HorizontalAlignment="Left"/>
        <Button x:Name="SimulateRoaming" Content="Simulate roaming" Margin="0,0,10,0" Click="SimulateRoaming_Click"/>
      </StackPanel>
    </Grid>
    <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
      <TextBlock x:Name="OutputTextBlock" Text="No Output available." TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left"/>
    </Grid>
    <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
    <VisualStateManager.VisualStateGroups>
      <VisualStateGroup>
        <VisualState x:Name="DefaultLayout"/>
        <VisualState x:Name="Below768Layout"/>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Grid>
</Page>